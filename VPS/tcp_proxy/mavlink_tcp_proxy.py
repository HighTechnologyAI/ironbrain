#!/usr/bin/env python3
"""
MAVLink TCP Proxy for VPS
Provides TCP proxy functionality for Mission Planner connections

Author: Manus AI
Date: 2025-08-19
Version: 1.0
"""

import socket
import threading
import time
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/ironbrain/tcp_proxy.log'),
        logging.StreamHandler()
    ]
)

class MAVLinkTCPProxy:
    def __init__(self, listen_port=14551, target_host='7.tcp.eu.ngrok.io', target_port=10317):
        self.listen_port = listen_port
        self.target_host = target_host
        self.target_port = target_port
        self.running = False
        self.server_socket = None
        self.client_connections = []
        self.stats = {
            'connections_total': 0,
            'connections_active': 0,
            'bytes_forwarded': 0,
            'errors': 0,
            'start_time': datetime.now()
        }
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ TCP –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.server_socket.bind(('0.0.0.0', self.listen_port))
            self.server_socket.listen(5)
            
            self.running = True
            logging.info(f"üöÄ MAVLink TCP Proxy started on port {self.listen_port}")
            logging.info(f"üì° Forwarding to {self.target_host}:{self.target_port}")
            
            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_thread = threading.Thread(target=self._stats_reporter, daemon=True)
            stats_thread.start()
            
            while self.running:
                try:
                    client_socket, client_address = self.server_socket.accept()
                    logging.info(f"üì± New connection from {client_address}")
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
                    client_thread = threading.Thread(
                        target=self._handle_client,
                        args=(client_socket, client_address),
                        daemon=True
                    )
                    client_thread.start()
                    
                except socket.error as e:
                    if self.running:
                        logging.error(f"‚ùå Accept error: {e}")
                        self.stats['errors'] += 1
                        
        except Exception as e:
            logging.error(f"‚ùå Proxy start error: {e}")
            self.stats['errors'] += 1
            
    def _handle_client(self, client_socket, client_address):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        target_socket = None
        
        try:
            self.stats['connections_total'] += 1
            self.stats['connections_active'] += 1
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É (ngrok)
            target_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            target_socket.settimeout(10)
            target_socket.connect((self.target_host, self.target_port))
            
            logging.info(f"üîó Connected to target {self.target_host}:{self.target_port}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
            client_to_target = threading.Thread(
                target=self._forward_data,
                args=(client_socket, target_socket, "Client->Target"),
                daemon=True
            )
            target_to_client = threading.Thread(
                target=self._forward_data,
                args=(target_socket, client_socket, "Target->Client"),
                daemon=True
            )
            
            client_to_target.start()
            target_to_client.start()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
            client_to_target.join()
            target_to_client.join()
            
        except Exception as e:
            logging.error(f"‚ùå Client handling error: {e}")
            self.stats['errors'] += 1
            
        finally:
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            try:
                if client_socket:
                    client_socket.close()
                if target_socket:
                    target_socket.close()
                    
                self.stats['connections_active'] -= 1
                logging.info(f"üì± Connection from {client_address} closed")
                
            except Exception as e:
                logging.error(f"‚ùå Connection cleanup error: {e}")
                
    def _forward_data(self, source_socket, destination_socket, direction):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–æ–∫–µ—Ç–∞–º–∏"""
        try:
            while self.running:
                try:
                    data = source_socket.recv(4096)
                    if not data:
                        break
                        
                    destination_socket.send(data)
                    self.stats['bytes_forwarded'] += len(data)
                    
                    if len(data) > 0:
                        logging.debug(f"üì¶ {direction}: {len(data)} bytes")
                        
                except socket.timeout:
                    continue
                except socket.error:
                    break
                    
        except Exception as e:
            logging.error(f"‚ùå Data forwarding error ({direction}): {e}")
            self.stats['errors'] += 1
            
    def _stats_reporter(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
        while self.running:
            try:
                time.sleep(60)  # –û—Ç—á–µ—Ç –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
                uptime = datetime.now() - self.stats['start_time']
                
                logging.info("üìä === TCP PROXY STATISTICS ===")
                logging.info(f"‚è±Ô∏è Uptime: {uptime}")
                logging.info(f"üîó Total connections: {self.stats['connections_total']}")
                logging.info(f"üë• Active connections: {self.stats['connections_active']}")
                logging.info(f"üì¶ Bytes forwarded: {self.stats['bytes_forwarded']}")
                logging.info(f"‚ùå Errors: {self.stats['errors']}")
                logging.info("================================")
                
            except Exception as e:
                logging.error(f"‚ùå Stats reporter error: {e}")
                
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        logging.info("üõë Stopping TCP proxy...")
        self.running = False
        
        if self.server_socket:
            try:
                self.server_socket.close()
            except Exception as e:
                logging.error(f"‚ùå Server socket close error: {e}")
                
        logging.info("‚úÖ TCP proxy stopped")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    proxy = MAVLinkTCPProxy()
    
    try:
        proxy.start()
    except KeyboardInterrupt:
        logging.info("üõë Received interrupt signal")
    except Exception as e:
        logging.error(f"‚ùå Main error: {e}")
    finally:
        proxy.stop()

if __name__ == '__main__':
    main()

