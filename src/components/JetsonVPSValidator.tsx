import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { CheckCircle, XCircle, Loader2, AlertTriangle, RefreshCw, Network } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { JetsonNetworkScanner } from './JetsonNetworkScanner';

interface ValidationResult {
  id: string;
  name: string;
  description: string;
  status: 'checking' | 'ready' | 'error' | 'attention';
  details?: any;
}

export function JetsonVPSValidator() {
  const [validationResults, setValidationResults] = useState<ValidationResult[]>([]);
  const [isValidating, setIsValidating] = useState(false);
  const [showNetworkScanner, setShowNetworkScanner] = useState(false);
  const [jetsonConfig, setJetsonConfig] = useState({ ip: '192.168.1.236', port: 5000 });

  const initializeValidation = () => {
    setValidationResults([
      { 
        id: 'vps-health', 
        name: 'VPS Health Check', 
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ VPS (87.120.254.156)', 
        status: 'checking' 
      },
      { 
        id: 'vps-api', 
        name: 'VPS Drone API', 
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏', 
        status: 'checking' 
      },
      { 
        id: 'vps-video', 
        name: 'VPS Video Stream', 
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞ RTSP', 
        status: 'checking' 
      },
      { 
        id: 'jetson-backend', 
        name: 'Jetson GCS Backend', 
        description: `–ü—Ä–æ–≤–µ—Ä–∫–∞ ${jetsonConfig.ip}:${jetsonConfig.port}`, 
        status: 'checking' 
      },
      { 
        id: 'jetson-camera', 
        name: 'Jetson Thermal Camera', 
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ USB —Ç–µ–ø–ª–æ–≤–∏–∑–æ—Ä–∞', 
        status: 'checking' 
      },
      { 
        id: 'edge-bridge', 
        name: 'Edge Function Bridge', 
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase Edge Functions', 
        status: 'checking' 
      }
    ]);
  };

  const updateResult = (id: string, status: ValidationResult['status'], description: string, details?: any) => {
    setValidationResults(prev => prev.map(result => 
      result.id === id ? { ...result, status, description, details } : result
    ));
  };

  const runValidation = async () => {
    setIsValidating(true);
    initializeValidation();

    // 1. Edge Function Bridge Test
    try {
      const bridgeResult = await supabase.functions.invoke('jetson-vps-bridge', {
        body: { action: 'health' }
      });

      if (bridgeResult.data?.success) {
        updateResult('edge-bridge', 'ready', 'Bridge —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞');
      } else {
        updateResult('edge-bridge', 'error', bridgeResult.data?.error || 'Bridge –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    } catch (error) {
      updateResult('edge-bridge', 'error', `–û—à–∏–±–∫–∞ bridge: ${error.message}`);
    }

    // 2. VPS Health Check via Edge Function
    try {
      const vpsResult = await supabase.functions.invoke('jetson-vps-bridge', {
        body: { action: 'vps_health' }
      });

      if (vpsResult.data?.success && vpsResult.data?.vps_status) {
        updateResult('vps-health', 'ready', `VPS –∞–∫—Ç–∏–≤–µ–Ω: ${vpsResult.data.vps_status.service} v${vpsResult.data.vps_status.version}`);
      } else {
        updateResult('vps-health', 'error', vpsResult.data?.error || 'VPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    } catch (error) {
      updateResult('vps-health', 'error', `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPS: ${error.message}`);
    }

    // 3. VPS Drone API
    try {
      const droneResult = await supabase.functions.invoke('jetson-vps-bridge', {
        body: { action: 'vps_drone_status' }
      });

      if (droneResult.data?.success && droneResult.data?.drone_status) {
        updateResult('vps-api', 'ready', `–¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞: ${droneResult.data.drone_status.battery_level}% –±–∞—Ç–∞—Ä–µ—è`);
      } else {
        updateResult('vps-api', 'attention', droneResult.data?.error || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏');
      }
    } catch (error) {
      updateResult('vps-api', 'error', `–û—à–∏–±–∫–∞ API: ${error.message}`);
    }

    // 4. VPS Video Stream
    try {
      const videoResult = await supabase.functions.invoke('jetson-vps-bridge', {
        body: { action: 'vps_video_status' }
      });

      if (videoResult.data?.success && videoResult.data?.video_status) {
        updateResult('vps-video', 'ready', `RTSP –ø–æ—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω: ${videoResult.data.video_status.stream_url}`);
      } else {
        updateResult('vps-video', 'attention', videoResult.data?.error || '–í–∏–¥–µ–æ–ø–æ—Ç–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    } catch (error) {
      updateResult('vps-video', 'error', `–û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ: ${error.message}`);
    }

    // 5. Jetson GCS Backend
    try {
      const jetsonResult = await supabase.functions.invoke('jetson-vps-bridge', {
        body: { 
          action: 'jetson_health',
          jetson_ip: jetsonConfig.ip,
          jetson_port: jetsonConfig.port
        }
      });

      if (jetsonResult.data?.success && jetsonResult.data?.jetson_status) {
        updateResult('jetson-backend', 'ready', `Jetson –∞–∫—Ç–∏–≤–µ–Ω: ${jetsonResult.data.jetson_status.service} v${jetsonResult.data.jetson_status.version}`);
      } else {
        updateResult('jetson-backend', 'error', jetsonResult.data?.error || 'Jetson –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    } catch (error) {
      updateResult('jetson-backend', 'error', `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Jetson: ${error.message}`);
    }

    // 6. Jetson Thermal Camera
    try {
      const cameraResult = await supabase.functions.invoke('jetson-vps-bridge', {
        body: { 
          action: 'jetson_camera',
          jetson_ip: jetsonConfig.ip,
          jetson_port: jetsonConfig.port
        }
      });

      if (cameraResult.data?.success && cameraResult.data?.camera_status) {
        updateResult('jetson-camera', 'ready', `–¢–µ–ø–ª–æ–≤–∏–∑–æ—Ä –∞–∫—Ç–∏–≤–µ–Ω: ${cameraResult.data.camera_status.device} (${cameraResult.data.camera_status.resolution})`);
      } else {
        updateResult('jetson-camera', 'attention', cameraResult.data?.error || '–¢–µ–ø–ª–æ–≤–∏–∑–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (error) {
      updateResult('jetson-camera', 'error', `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–º–µ—Ä—ã: ${error.message}`);
    }

    setIsValidating(false);
  };

  useEffect(() => {
    initializeValidation();
    runValidation();
  }, []);

  const getStatusIcon = (status: ValidationResult['status']) => {
    switch (status) {
      case 'checking':
        return <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />;
      case 'ready':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'attention':
        return <AlertTriangle className="h-4 w-4 text-yellow-500" />;
      case 'error':
        return <XCircle className="h-4 w-4 text-red-500" />;
    }
  };

  const getStatusBadge = (status: ValidationResult['status']) => {
    switch (status) {
      case 'checking':
        return <Badge variant="secondary">–ü—Ä–æ–≤–µ—Ä–∫–∞...</Badge>;
      case 'ready':
        return <Badge className="bg-green-500">‚úÖ –ì–æ—Ç–æ–≤</Badge>;
      case 'attention':
        return <Badge variant="secondary" className="bg-yellow-500">‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ</Badge>;
      case 'error':
        return <Badge variant="destructive">‚ùå –û—à–∏–±–∫–∞</Badge>;
    }
  };

  const allReady = validationResults.every(r => r.status === 'ready');
  const hasErrors = validationResults.some(r => r.status === 'error');

  const handleJetsonFound = (ip: string, port: number, response: any) => {
    setJetsonConfig({ ip, port });
    setShowNetworkScanner(false);
    
    // Update the validation results immediately
    const updatedResults = validationResults.map(result => {
      if (result.id === 'jetson-backend') {
        return {
          ...result,
          description: `‚úÖ –ù–∞–π–¥–µ–Ω: ${ip}:${port} - ${response.service} v${response.version}`,
          status: 'ready' as const
        };
      }
      return result;
    });
    setValidationResults(updatedResults);
  };

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            üîß –§–ê–ó–ê 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
            <Button 
              variant="outline" 
              size="sm" 
              onClick={runValidation}
              disabled={isValidating}
            >
              {isValidating ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <RefreshCw className="h-4 w-4" />
              )}
              –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å
            </Button>
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => setShowNetworkScanner(!showNetworkScanner)}
            >
              <Network className="h-4 w-4" />
              –ù–∞–π—Ç–∏ Jetson
            </Button>
          </CardTitle>
          <CardDescription>
            –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ VPS (87.120.254.156) –∏ Jetson ({jetsonConfig.ip}:{jetsonConfig.port}) –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-3">
          {validationResults.map((result) => (
            <div key={result.id} className="flex items-center justify-between p-3 border rounded-lg">
              <div className="flex items-center gap-3">
                {getStatusIcon(result.status)}
                <div>
                  <div className="font-medium">{result.name}</div>
                  <div className="text-sm text-muted-foreground">{result.description}</div>
                </div>
              </div>
              {getStatusBadge(result.status)}
            </div>
          ))}
          
          {allReady && (
            <div className="mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
              <div className="flex items-center gap-2 text-green-800">
                <CheckCircle className="h-5 w-5" />
                <span className="font-semibold">üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ì–û–¢–û–í–´! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –§–∞–∑–µ 2: –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</span>
              </div>
            </div>
          )}
          
          {hasErrors && (
            <div className="mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
              <div className="flex items-center gap-2 text-yellow-800">
                <AlertTriangle className="h-5 w-5" />
                <span className="font-semibold">‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º.</span>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {showNetworkScanner && (
        <JetsonNetworkScanner onJetsonFound={handleJetsonFound} />
      )}
    </div>
  );
}