import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Bot, Send } from 'lucide-react';
import { useLanguage } from '@/hooks/use-language';
import { translations } from '@/lib/i18n';

interface Task {
  id: string;
  title: string;
  description: string;
  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';
  priority: 'low' | 'medium' | 'high';
  due_date: string | null;
  created_at: string;
  estimated_hours: number | null;
  actual_hours: number | null;
  tags: string[];
  assigned_to: {
    id: string;
    full_name: string;
    position?: string;
  };
  created_by: {
    id: string;
    full_name: string;
  };
}

interface TaskAIAssistantProps {
  task: Task;
}

interface ChatMessage {
  id: string;
  content: string;
  isUser: boolean;
  timestamp: Date;
}

export const TaskAIAssistant: React.FC<TaskAIAssistantProps> = ({ task }) => {
  const { language } = useLanguage();
  const t = translations[language];
  
  const [message, setMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      content: generateWelcomeMessage(task, t),
      isUser: false,
      timestamp: new Date()
    }
  ]);

  const handleQuickAction = (action: string) => {
    setMessage(action);
    handleSendMessage(action);
  };

  const handleSendMessage = async (messageText?: string) => {
    const textToSend = messageText || message;
    if (!textToSend.trim()) return;

    // Add user message
    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      content: textToSend,
      isUser: true,
      timestamp: new Date()
    };

    setChatMessages(prev => [...prev, userMessage]);
    setMessage('');
    setIsLoading(true);

    try {
      // Real OpenAI API integration
      const response = await fetch('http://localhost:3001/ai-assistant', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: textToSend,
          task: {
            title: task.title,
            description: task.description,
            status: task.status,
            priority: task.priority,
            estimated_hours: task.estimated_hours,
            tags: task.tags,
            assigned_to: task.assigned_to.full_name
          },
          language: language
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to get AI response');
      }

      const data = await response.json();
      
      const aiResponse: ChatMessage = {
        id: (Date.now() + 1).toString(),
        content: data.response || generateAIResponse(textToSend, task, t),
        isUser: false,
        timestamp: new Date()
      };
      
      setChatMessages(prev => [...prev, aiResponse]);
    } catch (error) {
      console.error('AI Assistant Error:', error);
      
      // Fallback to local response if API fails
      const aiResponse: ChatMessage = {
        id: (Date.now() + 1).toString(),
        content: generateAIResponse(textToSend, task, t),
        isUser: false,
        timestamp: new Date()
      };
      
      setChatMessages(prev => [...prev, aiResponse]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString(language === 'bg' ? 'bg-BG' : language === 'ru' ? 'ru-RU' : 'en-US', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <Card className="h-full flex flex-col">
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center gap-2 text-lg">
          <Bot className="h-5 w-5 text-green-500" />
          {t.aiTaskAssistant}
        </CardTitle>
        <CardDescription className="text-sm">
          {t.aiAnalyzeContext}
        </CardDescription>
      </CardHeader>
      
      <CardContent className="flex-1 flex flex-col gap-4">
        {/* Quick Action Buttons */}
        <div className="space-y-2">
          <p className="text-sm font-medium text-muted-foreground">
            {t.exampleQuestions}
          </p>
          <div className="flex flex-wrap gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleQuickAction(t.howToBest)}
              className="text-xs"
            >
              {t.howToBest}
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleQuickAction(t.breakIntoSubtasks)}
              className="text-xs"
            >
              {t.breakIntoSubtasks}
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleQuickAction(t.giveRecommendations)}
              className="text-xs"
            >
              {t.giveRecommendations}
            </Button>
          </div>
        </div>

        {/* Chat Messages */}
        <div className="flex-1 space-y-3 max-h-64 overflow-y-auto">
          {chatMessages.map((msg) => (
            <div
              key={msg.id}
              className={`flex ${msg.isUser ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-[80%] rounded-lg p-3 text-sm ${
                  msg.isUser
                    ? 'bg-primary text-primary-foreground'
                    : 'bg-muted'
                }`}
              >
                {!msg.isUser && (
                  <div className="flex items-center gap-2 mb-2">
                    <Bot className="h-4 w-4 text-green-500" />
                    <span className="font-medium text-green-500">{t.tigerAI}</span>
                  </div>
                )}
                <div className="whitespace-pre-wrap">{msg.content}</div>
                <div className="text-xs opacity-70 mt-1">
                  {formatTime(msg.timestamp)}
                </div>
              </div>
            </div>
          ))}
          
          {isLoading && (
            <div className="flex justify-start">
              <div className="bg-muted rounded-lg p-3 text-sm">
                <div className="flex items-center gap-2">
                  <Bot className="h-4 w-4 text-green-500" />
                  <span className="font-medium text-green-500">{t.tigerAI}</span>
                </div>
                <div className="flex items-center gap-1 mt-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Message Input */}
        <div className="space-y-2">
          <Textarea
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={t.askAiAboutTask}
            className="min-h-[60px] resize-none"
            disabled={isLoading}
          />
          <div className="flex items-center justify-between">
            <p className="text-xs text-muted-foreground">
              {t.enterToSend}, {t.shiftEnterNewLine}
            </p>
            <Button
              onClick={() => handleSendMessage()}
              disabled={!message.trim() || isLoading}
              size="sm"
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

function generateWelcomeMessage(task: Task, t: any): string {
  const statusText = t[task.status] || task.status;
  const priorityText = t[task.priority] || task.priority;
  const tagsText = task.tags.length > 0 ? task.tags.join(', ') : t.aiNoTags;
  
  return `${t.aiGreeting} "${task.title}".

${t.aiKnowDetails}
‚Ä¢ ${t.aiPriority}: ${priorityText}
‚Ä¢ ${t.aiStatus}: ${statusText}
‚Ä¢ ${t.aiAssignee}: ${task.assigned_to.full_name}
‚Ä¢ ${t.aiEstimated}: ${task.estimated_hours || 0}${t.hours}
‚Ä¢ ${t.aiTags}: ${tagsText}

${t.aiCanHelp}
${t.aiBreakTask}
${t.aiGiveRecommendations}
${t.aiHelpPlanning}
${t.aiAnswerQuestions}
${t.aiSuggestApproach}`;
}

function generateAIResponse(userMessage: string, task: Task, t: any): string {
  const lowerMessage = userMessage.toLowerCase();
  
  if (lowerMessage.includes(t.howToBest.toLowerCase()) || lowerMessage.includes('how') || lowerMessage.includes('–∫–∞–∫')) {
    return `–î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ "${task.title}" —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:

1. –ù–∞—á–∞—Ç—å —Å –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
2. –†–∞–∑–±–∏—Ç—å –Ω–∞ —ç—Ç–∞–ø—ã –ø–æ ${Math.ceil((task.estimated_hours || 2) / 3)} —á–∞—Å–∞ –∫–∞–∂–¥—ã–π
3. –†–µ–≥—É–ª—è—Ä–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
4. –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ - –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ

–£—á–∏—Ç—ã–≤–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${t[task.priority]}", —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É–¥–µ–ª–∏—Ç—å –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.`;
  }
  
  if (lowerMessage.includes(t.breakIntoSubtasks.toLowerCase()) || lowerMessage.includes('subtask') || lowerMessage.includes('–ø–æ–¥–∑–∞–¥–∞—á')) {
    return `–†–∞–∑–±–∏–≤–∞—é –∑–∞–¥–∞—á—É "${task.title}" –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏:

üìã **–ü–æ–¥–∑–∞–¥–∞—á–∞ 1**: –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø
   - –ò–∑—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
   - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   - –í—Ä–µ–º—è: 30 –º–∏–Ω

üìã **–ü–æ–¥–∑–∞–¥–∞—á–∞ 2**: –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞
   - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
   - –í—Ä–µ–º—è: ${Math.floor((task.estimated_hours || 2) * 0.6)}—á

üìã **–ü–æ–¥–∑–∞–¥–∞—á–∞ 3**: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   - –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
   - –í—Ä–µ–º—è: ${Math.floor((task.estimated_hours || 2) * 0.3)}—á`;
  }
  
  if (lowerMessage.includes(t.giveRecommendations.toLowerCase()) || lowerMessage.includes('recommend') || lowerMessage.includes('–ø—Ä–µ–ø–æ—Ä—ä–∫')) {
    return `üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞—á–µ "${task.title}":**

üéØ **–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É**: –ó–∞–¥–∞—á–∞ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${t[task.priority]}" - ${getPriorityAdvice(task.priority, t)}

‚è∞ **–ü–æ –≤—Ä–µ–º–µ–Ω–∏**: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ${task.estimated_hours || 2}—á - —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –¥–æ–±–∞–≤–∏—Ç—å 20% –±—É—Ñ–µ—Ä

üë• **–ü–æ –∫–æ–º–∞–Ω–¥–µ**: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - ${task.assigned_to.full_name}, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø—Ä–∏–≤–ª–µ—á—å –∫–æ–ª–ª–µ–≥

üìä **–ü–æ –∫–∞—á–µ—Å—Ç–≤—É**: –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã`;
  }
  
  return `–ü–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –∑–∞–¥–∞—á–µ "${task.title}". 

–ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å (${t[task.status]})
- –û—Ü–µ–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã (–ø–ª–∞–Ω: ${task.estimated_hours || 2}—á)
- –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π

–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?`;
}

function getPriorityAdvice(priority: string, t: any): string {
  switch (priority) {
    case 'high':
      return '—Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è';
    case 'medium':
      return '–≤–∞–∂–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞, –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –≤ –ø–ª–∞–Ω–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ';
    case 'low':
      return '–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è';
    default:
      return '—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É';
  }
}

export default TaskAIAssistant;

