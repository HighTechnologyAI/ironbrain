import React, { useEffect, useRef, useState } from 'react';
import mapboxgl from 'mapbox-gl';
import 'mapbox-gl/dist/mapbox-gl.css';
import { Drone } from '@/hooks/use-drones';
import { Badge } from '@/components/ui/badge';
import { Loader2, AlertTriangle, Wifi, WifiOff } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';

interface TacticalMapboxProps {
  drones: Drone[];
  className?: string;
}

const TacticalMapbox: React.FC<TacticalMapboxProps> = ({ drones, className = '' }) => {
  const mapContainer = useRef<HTMLDivElement>(null);
  const map = useRef<mapboxgl.Map | null>(null);
  const [mapboxToken, setMapboxToken] = useState<string>('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const markers = useRef<mapboxgl.Marker[]>([]);

  // –°–æ–∑–¥–∞–Ω–∏–µ HTML-—ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –¥—Ä–æ–Ω–∞
  const createDroneMarker = (drone: Drone) => {
    const el = document.createElement('div');
    el.className = 'drone-marker';
    
    const isOnline = drone.status !== 'offline' && drone.last_contact && 
      new Date().getTime() - new Date(drone.last_contact).getTime() < 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    
    const statusColors = {
      ready: '#00ff41',
      armed: '#ff9f00', 
      in_flight: '#00ccff',
      warning: '#ffff00',
      critical: '#ff0000',
      offline: '#666666',
      maintenance: '#9966ff'
    };
    
    const color = statusColors[drone.status as keyof typeof statusColors] || '#666666';
    
    el.innerHTML = `
      <div class="relative group cursor-pointer">
        <div class="w-10 h-10 rounded-full border-2 flex items-center justify-center relative transition-all duration-300 hover:scale-125 hover:shadow-lg"
             style="background: ${color}15; border-color: ${color}; box-shadow: 0 0 20px ${color}40;">
          
          <!-- –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä–∫–µ—Ä –¥—Ä–æ–Ω–∞ -->
          <div class="w-4 h-4 rounded-full transition-all duration-300 relative"
               style="background: ${color}; box-shadow: 0 0 12px ${color};">
            <!-- –ü—É–ª—å—Å–∏—Ä—É—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–Ω–ª–∞–π–Ω –¥—Ä–æ–Ω–æ–≤ -->
            ${isOnline ? `
              <div class="absolute inset-0 w-4 h-4 rounded-full animate-ping"
                   style="background: ${color}80;">
              </div>
            ` : ''}
          </div>
          
          <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ -->
          ${isOnline ? `
            <div class="absolute -top-1 -right-1 w-3 h-3 rounded-full border border-background"
                 style="background: ${color}; box-shadow: 0 0 8px ${color};">
            </div>
          ` : `
            <div class="absolute -top-1 -right-1 w-3 h-3 rounded-full border border-background bg-gray-500">
            </div>
          `}
          
          <!-- –ë–∞—Ç–∞—Ä–µ—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä -->
          ${drone.battery_level ? `
            <div class="absolute -bottom-1 left-1/2 transform -translate-x-1/2 text-xs font-bold text-white bg-black/80 px-1 rounded"
                 style="color: ${drone.battery_level > 30 ? '#00ff41' : drone.battery_level > 15 ? '#ffff00' : '#ff0000'}">
              ${Math.round(drone.battery_level)}%
            </div>
          ` : ''}
        </div>
        
        <!-- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π tooltip -->
        <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-3 px-4 py-3 bg-black/95 backdrop-blur-sm text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-all duration-300 pointer-events-none whitespace-nowrap z-50 border border-cyan-400/30">
          <div class="space-y-2">
            <div class="font-bold text-cyan-400 text-lg">${drone.name}</div>
            <div class="text-gray-300">${drone.model || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å'}</div>
            
            <div class="flex items-center gap-2">
              <span class="w-2 h-2 rounded-full" style="background: ${color}"></span>
              <span class="capitalize font-medium">${drone.status}</span>
            </div>
            
            ${drone.battery_level ? `
              <div class="flex items-center gap-2 text-sm">
                <span class="text-cyan-400">üîã</span>
                <span style="color: ${drone.battery_level > 30 ? '#00ff41' : drone.battery_level > 15 ? '#ffff00' : '#ff0000'}">
                  ${Math.round(drone.battery_level)}%
                </span>
              </div>
            ` : ''}
            
            ${drone.last_contact ? `
              <div class="text-xs text-gray-400 border-t border-gray-600 pt-2">
                –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: ${new Date(drone.last_contact).toLocaleString('ru-RU')}
              </div>
            ` : ''}
            
            ${drone.serial ? `
              <div class="text-xs text-gray-500">S/N: ${drone.serial}</div>
            ` : ''}
          </div>
          
          <!-- –°—Ç—Ä–µ–ª–∫–∞ tooltip -->
          <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-black/95"></div>
        </div>
      </div>
    `;
    
    return el;
  };

  useEffect(() => {
    if (!mapContainer.current) return;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ Supabase edge function
    const initializeMap = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ edge function
        console.log('Calling get-mapbox-token edge function...');
        const { data, error } = await supabase.functions.invoke('get-mapbox-token');
        
        console.log('Edge function response:', { data, error });
        
        if (error) {
          console.error('Edge function error:', error);
          setError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Mapbox —Ç–æ–∫–µ–Ω–∞: ' + error.message);
          setLoading(false);
          return;
        }

        if (!data?.token) {
          console.error('No token in response:', data);
          setError('Mapbox —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞');
          setLoading(false);
          return;
        }

        const token = data.token;
        setMapboxToken(token);
        mapboxgl.accessToken = token;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Å –∫–∏–±–µ—Ä-—Å—Ç–∏–ª–µ–º
        map.current = new mapboxgl.Map({
          container: mapContainer.current,
          style: 'mapbox://styles/mapbox/dark-v11', // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
          center: [26.8855, 43.3889], // Timarevo Airfield, Bulgaria
          zoom: 8,
          pitch: 45,
          bearing: 0,
          antialias: true
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        map.current.addControl(
          new mapboxgl.NavigationControl({
            visualizePitch: true,
          }),
          'top-right'
        );

        // –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª—è –∫–∞—Ä—Ç—ã –¥–ª—è –∫–∏–±–µ—Ä-—ç—Ñ—Ñ–µ–∫—Ç–∞
        map.current.on('style.load', () => {
          if (!map.current) return;
          
          try {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç—É–º–∞–Ω –¥–ª—è –∫–∏–±–µ—Ä-—ç—Ñ—Ñ–µ–∫—Ç–∞
            map.current.setFog({
              color: 'rgb(20, 20, 40)',
              'high-color': 'rgb(0, 255, 255)',
              'horizon-blend': 0.1,
              'space-color': 'rgb(0, 0, 20)',
              'star-intensity': 0.8
            });

            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –Ω–∞ –∫–∏–±–µ—Ä-–ø–∞–ª–∏—Ç—Ä—É
            if (map.current.getLayer('water')) {
              map.current.setPaintProperty('water', 'fill-color', '#001122');
            }
            if (map.current.getLayer('land')) {
              map.current.setPaintProperty('land', 'fill-color', '#0a0a0f');
            }
          } catch (err) {
            console.warn('Style customization error:', err);
          }
          
          setLoading(false);
        });

        map.current.on('error', (e) => {
          console.error('Mapbox error:', e);
          if (e.error?.message?.includes('401')) {
            setError('–ù–µ–≤–µ—Ä–Ω—ã–π Mapbox —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
          } else {
            setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã: ' + (e.error?.message || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
          }
          setLoading(false);
        });

        map.current.on('load', () => {
          setLoading(false);
        });

      } catch (err) {
        console.error('Map initialization error:', err);
        setError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã: ' + (err instanceof Error ? err.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        setLoading(false);
      }
    };

    initializeMap();

    return () => {
      markers.current.forEach(marker => marker.remove());
      markers.current = [];
      map.current?.remove();
    };
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥—Ä–æ–Ω–æ–≤
  useEffect(() => {
    if (!map.current || loading) return;

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    markers.current.forEach(marker => marker.remove());
    markers.current = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –¥—Ä–æ–Ω–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    drones.forEach(drone => {
      if (drone.location_lat && drone.location_lon) {
        const markerElement = createDroneMarker(drone);
        
        const marker = new mapboxgl.Marker(markerElement)
          .setLngLat([drone.location_lon, drone.location_lat])
          .addTo(map.current!);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ä
        markerElement.addEventListener('click', () => {
          if (map.current) {
            map.current.flyTo({
              center: [drone.location_lon!, drone.location_lat!],
              zoom: 15,
              pitch: 60,
              duration: 2000
            });
          }
        });

        markers.current.push(marker);
      }
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–¥ –≤—Å–µ –¥—Ä–æ–Ω—ã
    if (drones.length > 0) {
      const dronesWithLocation = drones.filter(d => d.location_lat && d.location_lon);
      if (dronesWithLocation.length > 0) {
        const bounds = new mapboxgl.LngLatBounds();
        dronesWithLocation.forEach(drone => {
          bounds.extend([drone.location_lon!, drone.location_lat!]);
        });
        
        if (map.current) {
          map.current.fitBounds(bounds, {
            padding: 50,
            maxZoom: 15
          });
        }
      }
    }
  }, [drones, loading]);

  const resetView = () => {
    if (map.current) {
      map.current.flyTo({
        center: [26.8855, 43.3889],
        zoom: 10,
        pitch: 45,
        bearing: 0,
        duration: 2000
      });
    }
  };

  if (error) {
    return (
      <div className={`h-64 bg-surface-2 rounded-lg flex items-center justify-center border border-border ${className}`}>
        <div className="text-center max-w-md">
          <AlertTriangle className="h-12 w-12 mx-auto text-destructive mb-2" />
          <p className="text-destructive font-ui mb-2 text-sm">{error}</p>
          <p className="text-xs text-muted-foreground">
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É MAPBOX_PUBLIC_TOKEN –≤ Supabase Edge Function Secrets
          </p>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className={`h-64 bg-surface-2 rounded-lg flex items-center justify-center border border-border ${className}`}>
        <div className="text-center">
          <Loader2 className="h-8 w-8 animate-spin mx-auto text-primary mb-2" />
          <p className="text-muted-foreground font-ui">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã...</p>
        </div>
      </div>
    );
  }

  const onlineDrones = drones.filter(d => d.status !== 'offline').length;
  const offlineDrones = drones.length - onlineDrones;

  return (
    <div className={`relative ${className}`}>
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä–æ–Ω–æ–≤ */}
      <div className="absolute top-4 left-4 z-10 flex gap-2">
        <Badge variant="secondary" className="bg-black/80 text-cyan-400 border-cyan-400/50">
          <Wifi className="h-3 w-3 mr-1" />
          {onlineDrones} –æ–Ω–ª–∞–π–Ω
        </Badge>
        <Badge variant="secondary" className="bg-black/80 text-gray-400 border-gray-400/50">
          <WifiOff className="h-3 w-3 mr-1" />
          {offlineDrones} –æ—Ñ–ª–∞–π–Ω
        </Badge>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ–π */}
      <div className="absolute top-4 right-4 z-10 flex flex-col gap-2">
        <button
          onClick={resetView}
          className="px-3 py-2 bg-black/80 text-cyan-400 border border-cyan-400/50 rounded text-sm hover:bg-cyan-400/20 transition-colors backdrop-blur-sm"
        >
          üéØ –ë–∞–∑–æ–≤—ã–π –≤–∏–¥
        </button>
        
        <button
          onClick={() => {
            if (map.current) {
              map.current.flyTo({
                zoom: map.current.getZoom() + 1,
                duration: 1000
              });
            }
          }}
          className="px-3 py-2 bg-black/80 text-cyan-400 border border-cyan-400/50 rounded text-sm hover:bg-cyan-400/20 transition-colors backdrop-blur-sm"
        >
          üîç –ü—Ä–∏–±–ª–∏–∑–∏—Ç—å
        </button>
        
        <button
          onClick={() => {
            if (map.current) {
              map.current.flyTo({
                zoom: Math.max(map.current.getZoom() - 1, 1),
                duration: 1000
              });
            }
          }}
          className="px-3 py-2 bg-black/80 text-cyan-400 border border-cyan-400/50 rounded text-sm hover:bg-cyan-400/20 transition-colors backdrop-blur-sm"
        >
          üîç –û—Ç–¥–∞–ª–∏—Ç—å
        </button>
      </div>

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã */}
      <div ref={mapContainer} className="h-64 rounded-lg border border-border" />
      
      <style>{`
        .drone-marker {
          user-select: none;
          -webkit-user-select: none;
        }
        
        .drone-marker:hover {
          z-index: 1000;
        }
        
        /* –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –ø—É–ª—å—Å–∏—Ä—É—é—â–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ */
        @keyframes drone-pulse {
          0% { transform: scale(1); opacity: 1; }
          50% { transform: scale(1.2); opacity: 0.7; }
          100% { transform: scale(1); opacity: 1; }
        }
        
        .drone-marker .animate-ping {
          animation: drone-pulse 2s ease-in-out infinite;
        }
      `}</style>
    </div>
  );
};

export default TacticalMapbox;