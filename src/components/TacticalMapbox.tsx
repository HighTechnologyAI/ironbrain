import React, { useEffect, useRef, useState } from 'react';
import mapboxgl from 'mapbox-gl';
import 'mapbox-gl/dist/mapbox-gl.css';
import { Drone } from '@/hooks/use-drones';
import { Badge } from '@/components/ui/badge';
import { Loader2, AlertTriangle, Wifi, WifiOff } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';

interface TacticalMapboxProps {
  drones: Drone[];
  className?: string;
}

const TacticalMapbox: React.FC<TacticalMapboxProps> = ({ drones, className = '' }) => {
  const mapContainer = useRef<HTMLDivElement>(null);
  const map = useRef<mapboxgl.Map | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const markers = useRef<mapboxgl.Marker[]>([]);
  const loadingRef = useRef(true);

  const [mapboxToken, setMapboxToken] = useState<string | null>(null);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Mapbox –∏–∑ Edge Function
  useEffect(() => {
    const fetchToken = async () => {
      try {
        console.log('üîë [TOKEN] –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Mapbox —á–µ—Ä–µ–∑ Supabase...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Supabase client –¥–ª—è –≤—ã–∑–æ–≤–∞ Edge Function
        const { data, error } = await supabase.functions.invoke('get-mapbox-token');
        
        if (error) {
          console.error('‚ùå [TOKEN] –û—à–∏–±–∫–∞ Supabase —Ñ—É–Ω–∫—Ü–∏–∏:', error);
          throw error;
        }
        
        if (data && data.success && data.token) {
          console.log('‚úÖ [TOKEN] –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ Supabase');
          setMapboxToken(data.token);
        } else {
          console.error('‚ùå [TOKEN] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', data?.error);
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ç–æ–∫–µ–Ω
          console.log('üîÑ [TOKEN] –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ç–æ–∫–µ–Ω');
          setMapboxToken('pk.eyJ1IjoiaGlnaHRlY2hhaSIsImEiOiJjbWViZTBoaW0wbzVwMmpxdmFpeTVnbWdsIn0.8-x4oZ4TfetTTa5BEAXDYg');
        }
      } catch (err) {
        console.error('‚ùå [TOKEN] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞:', err);
        console.log('üîÑ [TOKEN] –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ç–æ–∫–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ç–æ–∫–µ–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ
        setMapboxToken('pk.eyJ1IjoiaGlnaHRlY2hhaSIsImEiOiJjbWViZTBoaW0wbzVwMmpxdmFpeTVnbWdsIn0.8-x4oZ4TfetTTa5BEAXDYg');
      }
    };
    
    fetchToken();
  }, []); // –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π loading
  useEffect(() => {
    console.log('üîÑ [LOADING STATE] loading –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞:', loading);
    loadingRef.current = loading;
  }, [loading]);

  // –°–æ–∑–¥–∞–Ω–∏–µ HTML-—ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –¥—Ä–æ–Ω–∞
  const createDroneMarker = (drone: Drone) => {
    const el = document.createElement('div');
    el.className = 'drone-marker';
    
    const statusColors = {
      ready: '#00ff41',
      armed: '#ff9f00', 
      in_flight: '#00ccff',
      warning: '#ffff00',
      critical: '#ff0000',
      offline: '#666666',
      maintenance: '#9966ff'
    };
    
    const color = statusColors[drone.status as keyof typeof statusColors] || '#666666';
    
    el.innerHTML = `
      <div class="relative group cursor-pointer">
        <div class="w-8 h-8 rounded-full border-2 flex items-center justify-center"
             style="background: ${color}; border-color: #fff; box-shadow: 0 0 10px ${color};">
          <div class="text-white text-xs font-bold">${drone.name.slice(-2)}</div>
        </div>
        
        <!-- Tooltip -->
        <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-black/90 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap">
          <div class="font-bold">${drone.name}</div>
          <div>–°—Ç–∞—Ç—É—Å: ${drone.status.toUpperCase()}</div>
          <div>–ë–∞—Ç–∞—Ä–µ—è: ${Math.round(drone.battery_level)}%</div>
          ${drone.model ? `<div>–ú–æ–¥–µ–ª—å: ${drone.model}</div>` : ''}
        </div>
      </div>
    `;
    
    return el;
  };

  // –û—Å–Ω–æ–≤–Ω–æ–π useEffect –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
  useEffect(() => {
    console.log('üîÑ [EFFECT] useEffect –∑–∞–ø—É—â–µ–Ω');
    console.log('üîÑ [EFFECT] mapContainer.current:', !!mapContainer.current);
    console.log('üîÑ [EFFECT] mapboxToken:', !!mapboxToken);
    console.log('üîÑ [EFFECT] map.current:', !!map.current);
    console.log('üîÑ [EFFECT] loading:', loading);
    
    if (map.current) {
      console.log('üîÑ [EFFECT] –ö–∞—Ä—Ç–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    if (!mapboxToken) {
      console.log('‚è≥ [EFFECT] mapboxToken –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∂–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å DOM —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    const checkAndInitialize = () => {
      console.log('üîç [CHECK] –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å mapContainer...');
      if (mapContainer.current) {
        console.log('‚úÖ [CHECK] mapContainer –≥–æ—Ç–æ–≤, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É');
        initializeMap();
      } else {
        console.log('‚è≥ [CHECK] mapContainer –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 100ms');
        setTimeout(checkAndInitialize, 100);
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π —á—Ç–æ–±—ã –¥–∞—Ç—å DOM –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è
    setTimeout(checkAndInitialize, 50);

    const initializeMap = () => {
      console.log('üó∫Ô∏è [INIT] –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞—Ä—Ç—ã');
      console.log('üó∫Ô∏è [INIT] mapContainer.current –µ—Å—Ç—å:', !!mapContainer.current);
      console.log('üó∫Ô∏è [INIT] mapboxToken –µ—Å—Ç—å:', !!mapboxToken);
      console.log('üó∫Ô∏è [INIT] mapboxToken –∑–Ω–∞—á–µ–Ω–∏–µ:', mapboxToken?.substring(0, 20) + '...');
      
      if (!mapContainer.current) {
        console.log('‚ùå [INIT] mapContainer.current –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
      }

      if (!mapboxToken) {
        console.log('‚ùå [INIT] mapboxToken –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
      }

      console.log('üó∫Ô∏è [INIT] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ state
      mapboxgl.accessToken = mapboxToken;
        
      try {
        console.log('üó∫Ô∏è [CREATE] –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É...');
        console.log('üó∫Ô∏è [CONTAINER] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥–æ—Ç–æ–≤:', !!mapContainer.current);
        console.log('üó∫Ô∏è [MAPBOX] mapboxgl –¥–æ—Å—Ç—É–ø–µ–Ω:', !!mapboxgl);
        console.log('üó∫Ô∏è [ACCESS_TOKEN] accessToken —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!mapboxgl.accessToken);
        
        const mapInstance = new mapboxgl.Map({
          container: mapContainer.current!,
          style: 'mapbox://styles/mapbox/dark-v11',
          center: [26.8916, 43.3968], // –¶–µ–Ω—Ç—Ä –ë–æ–ª–≥–∞—Ä–∏–∏
          zoom: 8,
          projection: 'mercator'
        });

        console.log('üó∫Ô∏è [INSTANCE] –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω:', !!mapInstance);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        mapInstance.addControl(new mapboxgl.NavigationControl(), 'top-right');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        mapInstance.on('load', () => {
          console.log('‚úÖ [SUCCESS] –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
          console.log('üîÑ [STATE] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loading = false');
          map.current = mapInstance;
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º loading
          console.log('üîÑ [BEFORE] loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º:', loading);
          setLoading(false);
          loadingRef.current = false;
          console.log('üîÑ [AFTER] –í—ã–∑–≤–∞–ª–∏ setLoading(false)');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ
          setTimeout(() => {
            console.log('üîç [CHECK] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ loading —á–µ—Ä–µ–∑ 200ms:', loadingRef.current);
            addDroneMarkers();
          }, 200);
        });
        
        
        mapInstance.on('error', (e) => {
          console.error('‚ùå [ERROR] –û—à–∏–±–∫–∞ –∫–∞—Ä—Ç—ã:', e);
          console.error('‚ùå [ERROR] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', e.error);
          console.error('‚ùå [ERROR] –¢–∏–ø –æ—à–∏–±–∫–∏:', typeof e.error);
          setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã: ${e.error?.message || JSON.stringify(e.error) || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
          setLoading(false);
        });

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        mapInstance.on('styleload', () => {
          console.log('üé® [STYLE] –°—Ç–∏–ª—å –∫–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω');
        });

        mapInstance.on('idle', () => {
          console.log('üí§ [IDLE] –ö–∞—Ä—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ idle');
        });

        const renderHandler = () => {
          console.log('üñºÔ∏è [RENDER] –ö–∞—Ä—Ç–∞ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑)');
          mapInstance.off('render', renderHandler);
        };
        
        mapInstance.on('render', renderHandler);
        
      } catch (err) {
        console.error('üí• [CRITICAL] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err);
        setError(err instanceof Error ? err.message : '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞');
        setLoading(false);
      }
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥—Ä–æ–Ω–æ–≤
    const addDroneMarkers = () => {
      console.log('üìç [MARKERS START] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç—É –∏ –¥—Ä–æ–Ω—ã...');
      console.log('üìç [MAP STATE] map.current —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!map.current);
      console.log('üìç [DRONES COUNT] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä–æ–Ω–æ–≤:', drones.length);
      
      if (!map.current) {
        console.error('‚ùå [MARKERS ERROR] –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
        return;
      }
      
      console.log('üìç [MARKERS] –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥—Ä–æ–Ω–æ–≤...', drones.length);
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
      markers.current.forEach(marker => marker.remove());
      markers.current = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
      const validDrones = drones.filter(drone => 
        drone.location_lat && 
        drone.location_lon && 
        !isNaN(drone.location_lat) && 
        !isNaN(drone.location_lon)
      );
      
      console.log('üìç [VALID] –í–∞–ª–∏–¥–Ω—ã—Ö –¥—Ä–æ–Ω–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:', validDrones.length);
      
      validDrones.forEach(drone => {
        const el = createDroneMarker(drone);
        
        const marker = new mapboxgl.Marker({ element: el })
          .setLngLat([drone.location_lon, drone.location_lat])
          .addTo(map.current!);
        
        markers.current.push(marker);
        
        console.log(`üìç [DRONE] –î–æ–±–∞–≤–ª–µ–Ω –º–∞—Ä–∫–µ—Ä –¥–ª—è ${drone.name} –Ω–∞ [${drone.location_lat}, ${drone.location_lon}]`);
      });
      
      // –ü–æ–¥–≥–æ–Ω—è–µ–º –≤–∏–¥ –ø–æ–¥ –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã
      if (validDrones.length > 0) {
        const bounds = new mapboxgl.LngLatBounds();
        validDrones.forEach(drone => {
          bounds.extend([drone.location_lon, drone.location_lat]);
        });
        
        map.current.fitBounds(bounds, {
          padding: 50,
          maxZoom: 12
        });
      }
    };

    initializeMap();

    return () => {
      console.log('üßπ [CLEANUP] –û—á–∏—Å—Ç–∫–∞ –∫–∞—Ä—Ç—ã...');
      markers.current.forEach(marker => marker.remove());
      if (map.current) {
        map.current.remove();
        map.current = null;
      }
    };
  }, [mapboxToken]); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–º —Ç–æ–∫–µ–Ω

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥—Ä–æ–Ω–æ–≤
  useEffect(() => {
    if (map.current && !loading) {
      console.log('üîÑ [UPDATE] –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥—Ä–æ–Ω–æ–≤...');
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
      markers.current.forEach(marker => marker.remove());
      markers.current = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
      const validDrones = drones.filter(drone => 
        drone.location_lat && 
        drone.location_lon && 
        !isNaN(drone.location_lat) && 
        !isNaN(drone.location_lon)
      );
      
      validDrones.forEach(drone => {
        const el = createDroneMarker(drone);
        
        const marker = new mapboxgl.Marker({ element: el })
          .setLngLat([drone.location_lon, drone.location_lat])
          .addTo(map.current!);
        
        markers.current.push(marker);
      });
    }
  }, [drones, loading]);

  const resetView = () => {
    if (!map.current) return;
    
    map.current.flyTo({
      center: [26.8916, 43.3968],
      zoom: 8,
      duration: 1000
    });
  };

  if (error) {
    return (
      <div className={`relative w-full h-full min-h-[400px] bg-surface-1 rounded-lg border border-border ${className}`}>
        <div className="absolute inset-0 flex flex-col items-center justify-center p-6">
          <AlertTriangle className="h-12 w-12 text-destructive mb-4" />
          <h3 className="text-lg font-semibold text-foreground mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã</h3>
          <p className="text-sm text-muted-foreground text-center mb-4">{error}</p>
          <button 
            onClick={() => window.location.reload()} 
            className="px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors"
          >
            –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
          </button>
        </div>
      </div>
    );
  }

  if (loading) {
    console.log('üîÑ [RENDER] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏, loading =', loading);
    return (
      <div className={`relative w-full h-full min-h-[400px] bg-surface-1 rounded-lg border border-border ${className}`}>
        <div className="absolute inset-0 flex flex-col items-center justify-center">
          <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
          <p className="text-sm text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã...</p>
          <p className="text-xs text-muted-foreground mt-2">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mapbox...</p>
        </div>
      </div>
    );
  }

  console.log('üó∫Ô∏è [RENDER] –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç—É, loading =', loading);

  return (
    <div className={`relative w-full h-full min-h-[400px] ${className}`}>
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä–æ–Ω–æ–≤ */}
      <div className="absolute top-4 left-4 z-10 flex gap-2">
        <Badge variant="outline" className="bg-background/80 backdrop-blur-sm">
          <Wifi className="h-3 w-3 mr-1" />
          Online: {drones.filter(d => d.status !== 'offline').length}
        </Badge>
        <Badge variant="outline" className="bg-background/80 backdrop-blur-sm">
          <WifiOff className="h-3 w-3 mr-1" />
          Offline: {drones.filter(d => d.status === 'offline').length}
        </Badge>
      </div>

      {/* –ö–æ–Ω—Ç—Ä–æ–ª—ã –∫–∞—Ä—Ç—ã */}
      <div className="absolute top-4 right-4 z-10 flex flex-col gap-2">
        <button
          onClick={resetView}
          className="px-3 py-2 bg-background/80 backdrop-blur-sm border border-border rounded-lg text-sm hover:bg-background/90 transition-colors"
        >
          –°–±—Ä–æ—Å–∏—Ç—å –≤–∏–¥
        </button>
      </div>

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã */}
      <div ref={mapContainer} className="absolute inset-0 rounded-lg overflow-hidden" />
      
      {/* –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ */}
      <style>{`
        .drone-marker {
          cursor: pointer;
          transition: transform 0.2s ease;
        }
        .drone-marker:hover {
          transform: scale(1.1);
          z-index: 1000;
        }
        .mapboxgl-popup {
          z-index: 1001;
        }
        .mapboxgl-popup-content {
          background: rgba(0, 0, 0, 0.9);
          color: white;
          border-radius: 8px;
          padding: 12px;
          font-size: 12px;
          border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .mapboxgl-popup-anchor-bottom .mapboxgl-popup-tip {
          border-top-color: rgba(0, 0, 0, 0.9);
        }
        .mapboxgl-popup-anchor-top .mapboxgl-popup-tip {
          border-bottom-color: rgba(0, 0, 0, 0.9);
        }
      `}</style>
    </div>
  );
};

export default TacticalMapbox;