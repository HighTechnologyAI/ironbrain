import React, { useRef, useEffect, useState } from 'react';
import mapboxgl from 'mapbox-gl';
import 'mapbox-gl/dist/mapbox-gl.css';
import { Drone } from '@/hooks/use-drones';
import { Badge } from '@/components/ui/badge';
import { Loader2, AlertTriangle, Wifi, RotateCcw } from 'lucide-react';

interface TacticalMapboxProps {
  drones: Drone[];
  className?: string;
}

const TacticalMapbox: React.FC<TacticalMapboxProps> = ({ drones, className = '' }) => {
  const mapContainer = useRef<HTMLDivElement>(null);
  const map = useRef<mapboxgl.Map | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const markers = useRef<mapboxgl.Marker[]>([]);

  // –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
  useEffect(() => {
    // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
    if (map.current) return;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω Mapbox
    mapboxgl.accessToken = 'pk.eyJ1IjoiaGlnaHRlY2hhaSIsImEiOiJjbWViZTBoaW0wbzVwMmpxdmFpeTVnbWdsIn0.8-x4oZ4TfetTTa5BEAXDYg';

    // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const initMap = () => {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞—Ä—Ç—ã...');
      console.log('üîç mapContainer.current:', mapContainer.current);
      console.log('üîç mapContainer type:', typeof mapContainer.current);
      
      const container = mapContainer.current;
      if (!container) {
        console.error('‚ùå mapContainer.current === null/undefined');
        setError('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        setLoading(false);
        return;
      }

      console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É...');

      try {
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
        const mapInstance = new mapboxgl.Map({
          container: container,
          style: 'mapbox://styles/mapbox/dark-v11',
          center: [26.8916, 43.3968],
          zoom: 8
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
        mapInstance.addControl(new mapboxgl.NavigationControl(), 'top-right');

        // –°–æ–±—ã—Ç–∏—è –∫–∞—Ä—Ç—ã
        mapInstance.on('load', () => {
          console.log('‚úÖ –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          setLoading(false);
          setError(null);
          addDroneMarkers();
        });

        mapInstance.on('error', (e) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ä—Ç—ã:', e);
          setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã');
          setLoading(false);
        });

        map.current = mapInstance;

      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É');
        setLoading(false);
      }
    };

    // –ñ–¥–µ–º 500ms –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const timer = setTimeout(initMap, 500);

    return () => {
      clearTimeout(timer);
      markers.current.forEach(marker => marker.remove());
      markers.current = [];
      if (map.current) {
        map.current.remove();
        map.current = null;
      }
    };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –¥—Ä–æ–Ω–∞
  const createDroneMarker = (drone: Drone) => {
    const el = document.createElement('div');
    el.className = 'drone-marker';
    
    const statusColors = {
      ready: '#00ff41',
      armed: '#ff9f00', 
      in_flight: '#00ccff',
      warning: '#ffff00',
      critical: '#ff0000',
      offline: '#666666',
      maintenance: '#9966ff'
    };
    
    const color = statusColors[drone.status as keyof typeof statusColors] || '#666666';
    
    el.innerHTML = `
      <div class="relative group cursor-pointer">
        <div class="w-8 h-8 rounded-full border-2 flex items-center justify-center shadow-lg"
             style="background-color: ${color}20; border-color: ${color};">
          <div class="w-3 h-3 rounded-full animate-pulse" style="background-color: ${color};"></div>
        </div>
        <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-50 shadow-xl">
          <div class="font-bold text-white">${drone.name}</div>
          <div class="text-gray-300">–°—Ç–∞—Ç—É—Å: ${drone.status || 'unknown'}</div>
          <div class="text-gray-300">–ë–∞—Ç–∞—Ä–µ—è: ${drone.battery_level || 0}%</div>
          <div class="text-gray-400 text-xs">
            ${drone.location_lat?.toFixed(4)}, ${drone.location_lon?.toFixed(4)}
          </div>
        </div>
      </div>
    `;
    
    return el;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –¥—Ä–æ–Ω–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
  const addDroneMarkers = () => {
    if (!map.current) {
      console.log('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤');
      return;
    }

    console.log('üìç –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥—Ä–æ–Ω–æ–≤...');

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
    markers.current.forEach(marker => marker.remove());
    markers.current = [];

    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥—Ä–æ–Ω–æ–≤ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    const validDrones = drones.filter(drone => 
      drone.location_lat && 
      drone.location_lon && 
      !isNaN(drone.location_lat) && 
      !isNaN(drone.location_lon)
    );

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${validDrones.length} –¥—Ä–æ–Ω–æ–≤ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏`);

    if (validDrones.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥—Ä–æ–Ω–æ–≤ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥—Ä–æ–Ω–∞
    validDrones.forEach(drone => {
      try {
        const marker = new mapboxgl.Marker({
          element: createDroneMarker(drone),
          anchor: 'center'
        })
        .setLngLat([drone.location_lon!, drone.location_lat!])
        .addTo(map.current!);

        markers.current.push(marker);
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–∞—Ä–∫–µ—Ä –¥–ª—è ${drone.name}`);
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è ${drone.name}:`, err);
      }
    });

    // –ü–æ–¥–≥–æ–Ω—è–µ–º –≤–∏–¥ –∫–∞—Ä—Ç—ã –ø–æ–¥ –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã
    try {
      if (validDrones.length > 1) {
        const bounds = new mapboxgl.LngLatBounds();
        validDrones.forEach(drone => {
          bounds.extend([drone.location_lon!, drone.location_lat!]);
        });
        map.current.fitBounds(bounds, { 
          padding: 80,
          maxZoom: 15
        });
        console.log('üéØ –ö–∞—Ä—Ç–∞ –ø–æ–¥–æ–≥–Ω–∞–Ω–∞ –ø–æ–¥ –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã');
      } else if (validDrones.length === 1) {
        map.current.flyTo({
          center: [validDrones[0].location_lon!, validDrones[0].location_lat!],
          zoom: 12,
          duration: 1000
        });
        console.log('üéØ –ö–∞—Ä—Ç–∞ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–∞ –Ω–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º –¥—Ä–æ–Ω–µ');
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ–Ω–∫–∏ –≥—Ä–∞–Ω–∏—Ü –∫–∞—Ä—Ç—ã:', err);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –≤–∏–¥–∞ –∫–∞—Ä—Ç—ã
  const resetMapView = () => {
    if (!map.current) return;
    
    console.log('üîÑ –°–±—Ä–æ—Å –≤–∏–¥–∞ –∫–∞—Ä—Ç—ã...');
    addDroneMarkers();
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥—Ä–æ–Ω–æ–≤
  useEffect(() => {
    if (map.current && !loading && !error) {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥—Ä–æ–Ω–æ–≤...');
      addDroneMarkers();
    }
  }, [drones, loading, error]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
  if (error) {
    return (
      <div className={`flex flex-col items-center justify-center h-full ${className}`}>
        <AlertTriangle className="w-16 h-16 text-red-500 mb-4" />
        <h3 className="text-lg font-semibold text-red-500 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã</h3>
        <p className="text-sm text-muted-foreground mb-4 text-center">{error}</p>
        <button 
          onClick={() => window.location.reload()} 
          className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"
        >
          –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
        </button>
      </div>
    );
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ - –ù–û —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º –¥–ª—è ref
  if (loading) {
    return (
      <div className={`relative w-full h-full ${className}`}>
        {/* –í–ê–ñ–ù–û: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –í–°–ï–ì–î–ê –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ DOM –¥–ª—è ref */}
        <div ref={mapContainer} className="absolute inset-0 rounded-lg" />
        
        {/* –ó–∞–≥—Ä—É–∑—á–∏–∫ –ø–æ–≤–µ—Ä—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */}
        <div className="absolute inset-0 flex flex-col items-center justify-center bg-surface-1 rounded-lg">
          <Loader2 className="w-8 h-8 animate-spin text-primary mb-4" />
          <p className="text-sm text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã...</p>
          <p className="text-xs text-muted-foreground mt-1">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mapbox...</p>
        </div>
      </div>
    );
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç—ã
  return (
    <div className={`relative w-full h-full ${className}`}>
      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã */}
      <div ref={mapContainer} className="absolute inset-0 rounded-lg" />
      
      {/* –°—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω */}
      <div className="absolute top-4 left-4 z-10">
        <Badge variant="secondary" className="bg-green-600/90 text-white shadow-lg">
          <Wifi className="w-3 h-3 mr-1" />
          –û–Ω–ª–∞–π–Ω
        </Badge>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥—Ä–æ–Ω–∞—Ö */}
      <div className="absolute top-4 left-4 mt-10 z-10">
        <Badge variant="outline" className="bg-surface-1/90 text-foreground shadow-lg">
          üìç {drones.length} –¥—Ä–æ–Ω–æ–≤
        </Badge>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –≤–∏–¥–∞ */}
      <div className="absolute top-4 right-4 z-10">
        <button
          onClick={resetMapView}
          className="px-3 py-2 bg-surface-2/90 hover:bg-surface-3 text-foreground border border-border rounded-md transition-colors text-sm shadow-lg flex items-center gap-2"
        >
          <RotateCcw className="w-4 h-4" />
          –°–±—Ä–æ—Å–∏—Ç—å –≤–∏–¥
        </button>
      </div>

      {/* –°—Ç–∏–ª–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ */}
      <style dangerouslySetInnerHTML={{
        __html: `
          .drone-marker {
            cursor: pointer;
            z-index: 10;
          }
          .drone-marker:hover {
            z-index: 50;
          }
          .mapboxgl-popup-content {
            background: rgb(17, 24, 39);
            color: white;
            border-radius: 8px;
            border: 1px solid rgb(55, 65, 81);
          }
          .mapboxgl-popup-tip {
            border-top-color: rgb(17, 24, 39);
          }
          .mapboxgl-ctrl-group {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 8px;
          }
        `
      }} />
    </div>
  );
};

export default TacticalMapbox;