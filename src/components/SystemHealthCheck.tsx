import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { AlertTriangle, CheckCircle, XCircle, Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface SystemCheck {
  name: string;
  status: 'checking' | 'ok' | 'warning' | 'error';
  message: string;
  details?: string;
}

export const SystemHealthCheck: React.FC = () => {
  const [checks, setChecks] = useState<SystemCheck[]>([]);
  const [isRunning, setIsRunning] = useState(false);
  const { toast } = useToast();

  const runHealthChecks = async () => {
    setIsRunning(true);
    const newChecks: SystemCheck[] = [
      { name: 'Database Connection', status: 'checking', message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...' },
      { name: 'User Presence System', status: 'checking', message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è...' },
      { name: 'Real-time Subscriptions', status: 'checking', message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...' },
      { name: 'Performance Metrics', status: 'checking', message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...' },
      { name: 'API Endpoints', status: 'checking', message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...' }
    ];

    setChecks(newChecks);

    // Simulate health checks
    for (let i = 0; i < newChecks.length; i++) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      setChecks(prev => prev.map((check, index) => {
        if (index === i) {
          // Simulate different results
          const results = [
            { status: 'ok' as const, message: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' },
            { status: 'ok' as const, message: '–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', details: '–î–æ–±–∞–≤–ª–µ–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫. –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 10 –º–∏–Ω—É—Ç.' },
            { status: 'ok' as const, message: '–ü–æ–¥–ø–∏—Å–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' },
            { status: 'ok' as const, message: '–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ' },
            { status: 'ok' as const, message: '–í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã' }
          ];
          
          return { ...check, ...results[i] };
        }
        return check;
      }));
    }

    setIsRunning(false);
    
    // Show summary
    const hasErrors = checks.some(c => c.status === 'error');
    const hasWarnings = checks.some(c => c.status === 'warning');
    
    if (hasErrors) {
      toast({
        title: "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
        description: "–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞–Ω–∏–µ",
        variant: "destructive"
      });
    } else if (hasWarnings) {
      toast({
        title: "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è",
        description: "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É",
      });
    } else {
      toast({
        title: "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
        description: "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ",
      });
    }
  };

  useEffect(() => {
    runHealthChecks();
  }, []);

  const getStatusIcon = (status: SystemCheck['status']) => {
    switch (status) {
      case 'checking':
        return <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />;
      case 'ok':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'warning':
        return <AlertTriangle className="h-4 w-4 text-yellow-500" />;
      case 'error':
        return <XCircle className="h-4 w-4 text-red-500" />;
    }
  };

  const getStatusBadge = (status: SystemCheck['status']) => {
    switch (status) {
      case 'checking':
        return <Badge variant="secondary">–ü—Ä–æ–≤–µ—Ä–∫–∞...</Badge>;
      case 'ok':
        return <Badge variant="default" className="bg-green-500/20 text-green-700">OK</Badge>;
      case 'warning':
        return <Badge variant="default" className="bg-yellow-500/20 text-yellow-700">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</Badge>;
      case 'error':
        return <Badge variant="destructive">–û—à–∏–±–∫–∞</Badge>;
    }
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
          {isRunning && <Loader2 className="h-4 w-4 animate-spin" />}
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-3">
        {checks.map((check, index) => (
          <div key={index} className="flex items-center justify-between p-3 rounded-lg border">
            <div className="flex items-center gap-3">
              {getStatusIcon(check.status)}
              <div>
                <div className="font-medium">{check.name}</div>
                <div className="text-sm text-muted-foreground">{check.message}</div>
                {check.details && (
                  <div className="text-xs text-yellow-600 mt-1">{check.details}</div>
                )}
              </div>
            </div>
            {getStatusBadge(check.status)}
          </div>
        ))}
        
        <div className="pt-4 border-t">
          <button 
            onClick={runHealthChecks}
            disabled={isRunning}
            className="w-full p-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 disabled:opacity-50"
          >
            {isRunning ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É'}
          </button>
        </div>
      </CardContent>
    </Card>
  );
};