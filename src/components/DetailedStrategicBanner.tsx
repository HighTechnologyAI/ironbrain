import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import StrategicObjectiveEditor from "./StrategicObjectiveEditor";
import { useStrategy, STRATEGIC_TITLE } from "@/hooks/use-strategy";
import { useLanguage } from "@/hooks/use-language";
import { useAdmin } from "@/hooks/use-admin";
import { 
  Calendar, 
  Wallet, 
  Edit3, 
  Target, 
  MapPin, 
  Clock, 
  Shield,
  TrendingUp,
  Users,
  Eye,
  Wifi,
  WifiOff
} from "lucide-react";
import { format } from "date-fns";
import { useState, useEffect } from "react";
import { StatusChip } from "@/components/ui/status-chip";

interface KeyResult {
  id: string;
  title: string;
  description: string;
  progress: number;
  status: 'on_track' | 'at_risk' | 'behind';
  targets: {
    current: string;
    target: string;
  };
}

export default function DetailedStrategicBanner() {
  const { loading, error, objective, updateObjective, syncStatus, saveStatus } = useStrategy(true);
  const { t, language } = useLanguage();
  const { isAdmin } = useAdmin();
  const [isEditOpen, setIsEditOpen] = useState(false);
  const [editData, setEditData] = useState({
    title: '',
    description: '',
    budget: '',
    date: '',
    currency: 'BGN',
    tags: [] as string[]
  });

  // –î–∞–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
  const keyResults: KeyResult[] = [
    {
      id: 'kr1',
      title: '–£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —à–æ—É',
      description: '45-–º–∏–Ω—É—Ç–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞, –±–æ–ª–≥–∞—Ä—Å–∫–∏–π —Ñ–ª–∞–≥ ‚Üí –ª–æ–≥–æ—Ç–∏–ø Tiger, 3 —ç—Ç–∞–ø–∞ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è, –≤–æ–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è-–ø—Ä–æ—Ü–µ—Å—Å',
      progress: 0,
      status: 'on_track',
      targets: {
        current: '1 show',
        target: '0 show'
      }
    },
    {
      id: 'kr2', 
      title: 'VIP-–∞—É–¥–∏—Ç–æ—Ä–∏—è 20+',
      description: '–ú–∏–Ω–∏—Å—Ç—Ä—ã, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ —Å–ª—É–∂–±, –∑–∞—Ä—É–±–µ–∂–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏, –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã; VIP-—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ',
      progress: 0,
      status: 'on_track',
      targets: {
        current: '20 guests',
        target: '0 guests'
      }
    },
    {
      id: 'kr3',
      title: '–ö–ª—é—á–µ–≤–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç 2+ –º–ª–Ω –ª–≤',
      description: '–ì–æ—Å. –∏–ª–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, 30%+ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞, –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª +50%',
      progress: 0,
      status: 'on_track',
      targets: {
        current: '2 M BGN',
        target: '0 M BGN'
      }
    },
    {
      id: 'kr4',
      title: '–ú–µ–¥–∏–∞-–æ—Ö–≤–∞—Ç 100,000+',
      description: '5+ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –Ω–∞—Ü. –°–ú–ò, –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å–º, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ, 50+ –ª–∏–¥–æ–≤',
      progress: 0,
      status: 'on_track',
      targets: {
        current: '100000 reach',
        target: '0 reach'
      }
    }
  ];

  const localized = {
    ru: {
      strategicGoal: '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ª—å',
      location: '–õ–æ–∫–∞—Ü–∏—è',
      budget: '–ë—é–¥–∂–µ—Ç',
      targetDate: '–¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞',
      plannedBudget: '–ü–ª–∞–Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç',
      format: '–§–æ—Ä–º–∞—Ç',
      technologies: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
      safety: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
      strategicImportance: '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
      keyResults: '–ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
      progress: '–ü—Ä–æ–≥—Ä–µ—Å—Å',
      target: '–¶–µ–ª—å',
      current: '–¢–µ–∫—É—â–µ–µ'
    },
    en: {
      strategicGoal: 'Strategic Goal',
      location: 'Location',
      budget: 'Budget',
      targetDate: 'Target Date',
      plannedBudget: 'Planned Budget',
      format: 'Format',
      technologies: 'Technologies',
      safety: 'Safety',
      strategicImportance: 'Strategic Importance',
      keyResults: 'Key Results',
      progress: 'Progress',
      target: 'Target',
      current: 'Current'
    },
    bg: {
      strategicGoal: '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞ —Ü–µ–ª',
      location: '–õ–æ–∫–∞—Ü–∏—è',
      budget: '–ë—é–¥–∂–µ—Ç',
      targetDate: '–¶–µ–ª–µ–≤–∞ –¥–∞—Ç–∞',
      plannedBudget: '–ü–ª–∞–Ω–∏—Ä–∞–Ω –±—é–¥–∂–µ—Ç',
      format: '–§–æ—Ä–º–∞—Ç',
      technologies: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
      safety: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç',
      strategicImportance: '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ',
      keyResults: '–ö–ª—é—á–æ–≤–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏',
      progress: '–ü—Ä–æ–≥—Ä–µ—Å',
      target: '–¶–µ–ª',
      current: '–¢–µ–∫—É—â–æ'
    }
  } as const;

  const loc = (localized as any)[language] || localized.ru;

  useEffect(() => {
    if (objective) {
      console.log('üéØ Detailed Strategic Banner updated:', objective.title);
    }
  }, [objective]);

  const handleEditOpen = () => {
    const displayTitle = objective?.title || '';
    const displayDescription = objective?.description || '';
    const displayDate = objective?.target_date ? format(new Date(objective.target_date), 'dd.MM.yyyy') : '';
    const displayBudget = objective?.budget_planned;
    const displayCurrency = objective?.currency || 'BGN';
    const displayTags = objective?.tags || [];

    setEditData({
      title: displayTitle,
      description: displayDescription,
      budget: displayBudget?.toString() || '50000',
      date: displayDate,
      currency: displayCurrency,
      tags: displayTags
    });
    setIsEditOpen(true);
  };

  const handleSave = async (data: {
    title: string;
    description: string;
    budget: string;
    currency: string;
    date: string;
    tags: string[];
  }) => {
    if (!updateObjective) return;
    
    const updates: any = {};
    
    if (data.budget && !isNaN(Number(data.budget))) {
      updates.budget_planned = Number(data.budget);
    }
    
    if (data.date) {
      updates.target_date = data.date;
    }
    
    if (data.title) updates.title = data.title;
    if (data.description) updates.description = data.description;
    if (data.currency) updates.currency = data.currency;
    if (data.tags) updates.tags = data.tags;
    
    const success = await updateObjective(updates);
    if (success) {
      setIsEditOpen(false);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'on_track': return 'text-success';
      case 'at_risk': return 'text-warning';
      case 'behind': return 'text-destructive';
      default: return 'text-muted-foreground';
    }
  };

  if (loading) {
    return (
      <Card className="bg-surface-1 border-border">
        <CardHeader>
          <div className="animate-pulse space-y-2">
            <div className="h-4 bg-muted rounded w-32" />
            <div className="h-8 bg-muted rounded w-96" />
          </div>
        </CardHeader>
      </Card>
    );
  }

  if (error || !objective) {
    return (
      <Card className="bg-surface-1 border-border">
        <CardHeader>
          <CardTitle className="text-destructive">
            –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–π —Ü–µ–ª–∏
          </CardTitle>
        </CardHeader>
      </Card>
    );
  }

  const displayTitle = objective?.title || '–î–†–û–ù-–®–û–£ 2025';
  const displayDescription = objective?.description || '';
  const displayDate = objective?.target_date ? format(new Date(objective.target_date), 'dd MMMM yyyy') : '–°–µ–Ω—Ç—è–±—Ä—å 2025';
  const displayBudget = objective?.budget_planned || 50000;
  const displayCurrency = objective?.currency || '–ª–≤';

  return (
    <>
      <Card className="bg-surface-1 border-border">
        <CardHeader className="pb-4">
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <div className="flex items-center gap-2 mb-2">
                <Target className="h-5 w-5 text-primary" />
                <span className="text-sm font-medium text-muted-foreground">
                  {loc.strategicGoal}
                </span>
                <div className={`transition-all duration-300 ${
                  syncStatus === 'connected' ? 'text-success' :
                  syncStatus === 'connecting' ? 'text-warning animate-pulse' :
                  'text-destructive'
                }`}>
                  {syncStatus === 'connected' ? <Wifi className="h-4 w-4" /> :
                   syncStatus === 'connecting' ? <Clock className="h-4 w-4" /> :
                   <WifiOff className="h-4 w-4" />}
                </div>
                <StatusChip variant="ready" className="text-xs ml-auto">
                  –ê–ö–¢–ò–í–ù–ê
                </StatusChip>
              </div>
              <h1 className="text-xl font-bold text-foreground mb-4">
                –ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–ø–µ—á–∞—Ç–ª—è—é—â–µ–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –¥—Ä–æ–Ω-—à–æ—É –¥–ª—è –≤—ã—Å–æ–∫–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥–æ—Å—Ç–µ–π –∏ 
                –∑–∞–∫–ª—é—á–∏—Ç—å –∫–ª—é—á–µ–≤–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–µ–≤–æ–≤
              </h1>
            </div>
            {isAdmin && (
              <Button 
                variant="ghost" 
                size="sm"
                className="h-8 w-8 p-0 text-muted-foreground hover:text-primary"
                onClick={handleEditOpen}
              >
                <Edit3 className="h-4 w-4" />
              </Button>
            )}
          </div>
        </CardHeader>

        <CardContent className="space-y-6">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div className="flex items-center gap-2">
              <MapPin className="h-4 w-4 text-primary" />
              <span className="text-muted-foreground">{loc.location}:</span>
              <span className="font-mono">Timarevo Airfield (43¬∞23'20.2"N 26¬∞53'07.6"E)</span>
            </div>
            <div className="flex items-center gap-2">
              <Wallet className="h-4 w-4 text-primary" />
              <span className="text-muted-foreground">{loc.budget}:</span>
              <span className="font-mono">{displayBudget.toLocaleString()} {displayCurrency}</span>
            </div>
            <div className="flex items-center gap-2">
              <Clock className="h-4 w-4 text-primary" />
              <span className="text-muted-foreground">{loc.format}:</span>
              <span>19:30-20:30 (–∑–∞–∫–∞—Ç + –Ω–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã)</span>
            </div>
            <div className="flex items-center gap-2">
              <Target className="h-4 w-4 text-primary" />
              <span className="text-muted-foreground">{loc.technologies}:</span>
              <span>–ú–æ–¥—É–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥—Ä–æ–Ω–∞</span>
            </div>
            <div className="flex items-center gap-2">
              <Calendar className="h-4 w-4 text-primary" />
              <span className="text-muted-foreground">–î–∞—Ç–∞:</span>
              <span className="font-mono">–°–µ–Ω—Ç—è–±—Ä—å 2025</span>
            </div>
            <div className="flex items-center gap-2">
              <Shield className="h-4 w-4 text-primary" />
              <span className="text-muted-foreground">{loc.safety}:</span>
              <span>–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ + –ø–æ–∂–∞—Ä–Ω–∞—è –º–∞—à–∏–Ω–∞</span>
            </div>
          </div>

          {/* –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ */}
          <div>
            <h3 className="text-sm font-semibold text-foreground mb-2">{loc.strategicImportance}:</h3>
            <p className="text-sm text-muted-foreground">
              –ü–µ—Ä–µ–ª–æ–º–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è Tiger Technology –≤ –ø—Ä–∏–∑–Ω–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å –º–Ω–æ–≥–æ–º–∏–ª–ª–∏–æ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏!
            </p>
          </div>

          {/* –ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
          <div>
            <h3 className="text-sm font-semibold text-foreground mb-4 flex items-center gap-2">
              <TrendingUp className="h-4 w-4 text-primary" />
              {loc.keyResults}
            </h3>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
              {keyResults.map((kr, index) => (
                <Card key={kr.id} className="bg-surface-2 border-border/50">
                  <CardContent className="p-4">
                    <div className="flex items-start justify-between mb-2">
                      <div className="flex items-center gap-2">
                        <Badge variant="outline" className="text-xs">
                          KR{index + 1}
                        </Badge>
                        <span className="text-sm font-semibold text-foreground">
                          {kr.title}
                        </span>
                      </div>
                      <StatusChip 
                        variant={kr.status === 'on_track' ? 'ready' : kr.status === 'at_risk' ? 'warning' : 'critical'}
                        className="text-xs"
                      >
                        on_track
                      </StatusChip>
                    </div>
                    
                    <p className="text-xs text-muted-foreground mb-3 line-clamp-2">
                      {kr.description}
                    </p>
                    
                    <div className="space-y-2">
                      <div className="flex justify-between text-xs">
                        <span className="text-muted-foreground">{loc.progress}</span>
                        <span className={getStatusColor(kr.status)}>
                          {kr.progress}%
                        </span>
                      </div>
                      <Progress value={kr.progress} className="h-1" />
                      
                      <div className="flex justify-between text-xs">
                        <div className="flex items-center gap-1">
                          <span className="text-muted-foreground">{loc.target}:</span>
                          <span className="font-mono">{kr.targets.target}</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <span className="text-muted-foreground">{loc.current}:</span>
                          <span className="font-mono">{kr.targets.current}</span>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      <StrategicObjectiveEditor
        isOpen={isEditOpen}
        onOpenChange={setIsEditOpen}
        title={editData.title}
        description={editData.description}
        budget={editData.budget}
        currency={editData.currency}
        date={editData.date}
        tags={editData.tags}
        onSave={handleSave}
        onCancel={() => setIsEditOpen(false)}
        syncStatus={syncStatus}
        saveStatus={saveStatus}
        localized={loc}
      />
    </>
  );
}