import React, { useState, useRef, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { Button } from '@/components/ui/button';
import { Mic, MicOff, Volume2 } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { CommandDispatcher } from './commandSchema';
import { toast } from '@/components/ui/use-toast';

export const SimpleVoiceButton: React.FC = () => {
  const [isListening, setIsListening] = useState(false);
  const [isSupported, setIsSupported] = useState(false);
  const recognitionRef = useRef<any>(null);
  const commandDispatcher = useRef(CommandDispatcher.getInstance());

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–µ—á–µ–≤–æ–≥–æ API
    const supported = 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window;
    setIsSupported(supported);
    
    if (!supported) {
      console.warn('Speech recognition not supported');
    }
  }, []);

  const speak = async (text: string) => {
    try {
      console.log('üé§ –ù–∞—á–∏–Ω–∞—é –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ:', text);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Supabase client –¥–ª—è –≤—ã–∑–æ–≤–∞ edge —Ñ—É–Ω–∫—Ü–∏–∏
      const { data, error } = await supabase.functions.invoke('ai-text-to-speech', {
        body: { 
          text, 
          voice: 'alloy'
        }
      });

      if (error) {
        console.error('‚ùå TTS Edge Function Error:', error);
        fallbackSpeak(text);
        return;
      }

      if (!data) {
        console.error('‚ùå No audio data received');
        fallbackSpeak(text);
        return;
      }

      console.log('‚úÖ TTS Response received');

      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –∏–∑ blob –¥–∞–Ω–Ω—ã—Ö
      const audioBlob = new Blob([data], { type: 'audio/mpeg' });
      const audioUrl = URL.createObjectURL(audioBlob);
      const audio = new Audio(audioUrl);
      
      audio.onloadstart = () => console.log('üéµ Audio loading started');
      audio.oncanplay = () => console.log('üéµ Audio can play');
      audio.onplay = () => console.log('üéµ Audio started playing');
      audio.onended = () => {
        console.log('üéµ Audio finished playing');
        URL.revokeObjectURL(audioUrl);
      };
      
      audio.onerror = (e) => {
        console.error('‚ùå Audio playback error:', e);
        URL.revokeObjectURL(audioUrl);
        fallbackSpeak(text);
      };
      
      await audio.play();
      console.log('üéµ Live voice audio playing...');
      
    } catch (error) {
      console.error('‚ùå Speech error:', error);
      fallbackSpeak(text);
    }
  };

  const fallbackSpeak = (text: string) => {
    console.log('Using fallback browser TTS');
    if ('speechSynthesis' in window) {
      speechSynthesis.cancel();
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'ru-RU';
      utterance.rate = 0.9;
      speechSynthesis.speak(utterance);
    }
  };

  const handleTranscript = async (transcript: string) => {
    console.log('üéôÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', transcript);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    toast({
      title: "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...",
      description: transcript,
    });
    
    try {
      const { data: user } = await supabase.auth.getUser();
      
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ AI —Ä–æ—É—Ç–µ—Ä:', transcript);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è
      const { data, error } = await supabase.functions.invoke('ai-router', {
        body: {
          transcript,
          events: [
            {
              type: 'voice_chat',
              route: window.location.pathname,
              timestamp: Date.now()
            }
          ],
          locale: 'ru-RU',
          user_id: user.user?.id
        }
      });

      console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç AI —Ä–æ—É—Ç–µ—Ä–∞:', data, error);

      if (error) {
        console.error('‚ùå AI Router error:', error);
        await speak('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ø–æ–º–æ—â–Ω–∏–∫—É');
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º",
          variant: "destructive"
        });
        return;
      }

      // –ü—Ä–æ–∏–∑–Ω–æ—Å–∏–º –æ—Ç–≤–µ—Ç
      if (data?.replyText) {
        console.log('üîä –ù–∞—á–∏–Ω–∞—é –≥–æ–≤–æ—Ä–∏—Ç—å:', data.replyText);
        await speak(data.replyText);
        toast({
          title: "IronBrain –≥–æ–≤–æ—Ä–∏—Ç:",
          description: data.replyText,
        });
      } else {
        console.log('‚ö†Ô∏è –ù–µ—Ç replyText –≤ –æ—Ç–≤–µ—Ç–µ AI —Ä–æ—É—Ç–µ—Ä–∞, –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', data);
        await speak('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–º–æ—â–Ω–∏–∫–∞');
        toast({
          title: "–ü—Ä–æ–±–ª–µ–º–∞",
          description: "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–º–æ—â–Ω–∏–∫–∞",
          variant: "destructive"
        });
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å
      if (data?.commands) {
        console.log('‚ö° –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—ã:', data.commands);
        for (const command of data.commands) {
          console.log('Executing command:', command);
          const result = await commandDispatcher.current.execute(command);
          console.log('Command result:', result);
        }
      }

    } catch (error) {
      console.error('‚ùå Error processing transcript:', error);
      await speak('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É",
        variant: "destructive"
      });
    }
  };

  const startListening = () => {
    if (!isSupported) {
      toast({
        title: "–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
        description: "–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ",
        variant: "destructive"
      });
      return;
    }

    try {
      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
      const recognition = new SpeechRecognition();
      
      recognition.lang = 'ru-RU';
      recognition.interimResults = false;
      recognition.maxAlternatives = 1;
      recognition.continuous = false;

      recognition.onstart = () => {
        setIsListening(true);
        console.log('–°–ª—É—à–∞—é...');
      };

      recognition.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript.trim();
        if (transcript) {
          handleTranscript(transcript);
        }
      };

      recognition.onerror = (event: any) => {
        console.error('Recognition error:', event.error);
        setIsListening(false);
        
        if (event.error === 'not-allowed') {
          toast({
            title: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
            description: "–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            variant: "destructive"
          });
        }
      };

      recognition.onend = () => {
        setIsListening(false);
        console.log('–ó–∞–∫–æ–Ω—á–∏–ª —Å–ª—É—à–∞—Ç—å');
      };

      recognitionRef.current = recognition;
      recognition.start();

    } catch (error) {
      console.error('Failed to start recognition:', error);
      setIsListening(false);
    }
  };

  const stopListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }
    setIsListening(false);
  };

  const toggleListening = () => {
    if (isListening) {
      stopListening();
    } else {
      startListening();
    }
  };

  // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  // const isVoiceEnabled = import.meta.env.VITE_VOICE_AI_ENABLED === 'true';
  // if (!isVoiceEnabled) {
  //   return null;
  // }

  const button = (
    <div className="fixed bottom-6 right-6 z-[9999]">
      <Button
        onClick={toggleListening}
        className={`
          w-16 h-16 rounded-full shadow-lg transition-all duration-300
          ${isListening 
            ? 'bg-red-500 hover:bg-red-600 animate-pulse' 
            : 'bg-primary hover:bg-primary-hover'
          }
        `}
        disabled={!isSupported}
      >
        {isListening ? (
          <MicOff className="h-8 w-8 text-white" />
        ) : (
          <Mic className="h-8 w-8 text-white" />
        )}
      </Button>
      
      {isListening && (
        <div className="absolute -top-12 left-1/2 transform -translate-x-1/2 bg-background border rounded-lg px-3 py-1 text-sm whitespace-nowrap">
          –ì–æ–≤–æ—Ä–∏—Ç–µ...
        </div>
      )}
    </div>
  );

  return createPortal(button, document.body);
};