#!/usr/bin/env python3
"""
TCP MAVLink Bridge –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ ngrok —Ç—É–Ω–Ω–µ–ª—å
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É UDP –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º–µ–∂–¥—É Jetson –∏ VPS
"""

import socket
import threading
import time
import logging
from pymavlink import mavutil

class TCPMAVLinkBridge:
    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.autopilot_port = '/dev/ttyACM0'
        self.autopilot_baud = 921600
        self.tcp_port = 14550  # TCP –ø–æ—Ä—Ç –¥–ª—è ngrok
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_from_autopilot': 0,
            'messages_to_clients': 0,
            'clients_connected': 0,
            'heartbeats': 0,
            'params': 0,
            'errors': 0
        }
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
        self.clients = []
        self.running = True
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
        
    def connect_autopilot(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç—É"""
        try:
            self.logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç—É {self.autopilot_port}@{self.autopilot_baud}")
            self.master = mavutil.mavlink_connection(
                self.autopilot_port, 
                baud=self.autopilot_baud,
                timeout=5
            )
            
            # –û–∂–∏–¥–∞–Ω–∏–µ heartbeat
            self.logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ heartbeat –æ—Ç –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞...")
            self.master.wait_heartbeat(timeout=10)
            self.logger.info(f"‚úÖ Heartbeat –ø–æ–ª—É—á–µ–Ω –æ—Ç system {self.master.target_system}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç—É: {e}")
            return False
    
    def start_tcp_server(self):
        """–ó–∞–ø—É—Å–∫ TCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        try:
            self.tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.tcp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.tcp_socket.bind(('0.0.0.0', self.tcp_port))
            self.tcp_socket.listen(5)
            
            self.logger.info(f"üåê TCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.tcp_port}")
            self.logger.info("üì° –ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é Mission Planner —á–µ—Ä–µ–∑ ngrok")
            
            # –ü–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            accept_thread = threading.Thread(target=self.accept_clients, daemon=True)
            accept_thread.start()
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TCP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def accept_clients(self):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        while self.running:
            try:
                client_socket, addr = self.tcp_socket.accept()
                self.logger.info(f"üì± Mission Planner –ø–æ–¥–∫–ª—é—á–µ–Ω: {addr}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                self.clients.append(client_socket)
                self.stats['clients_connected'] += 1
                
                # –ü–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
                client_thread = threading.Thread(
                    target=self.handle_client, 
                    args=(client_socket, addr),
                    daemon=True
                )
                client_thread.start()
                
            except Exception as e:
                if self.running:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    def handle_client(self, client_socket, addr):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Mission Planner"""
        try:
            while self.running:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç Mission Planner
                data = client_socket.recv(1024)
                if not data:
                    break
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ–ø–∏–ª–æ—Ç—É
                try:
                    self.master.write(data)
                    self.logger.debug(f"üì§ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç {addr} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç—É: {len(data)} –±–∞–π—Ç")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ–ø–∏–ª–æ—Ç—É: {e}")
                    self.stats['errors'] += 1
                    
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ {addr}: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            if client_socket in self.clients:
                self.clients.remove(client_socket)
            client_socket.close()
            self.logger.info(f"üì± Mission Planner –æ—Ç–∫–ª—é—á–µ–Ω: {addr}")
    
    def autopilot_reader(self):
        """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞–º"""
        self.logger.info("üì° –ó–∞–ø—É—Å–∫ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞...")
        
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞
                msg = self.master.recv_match(blocking=False, timeout=0.1)
                if msg:
                    self.stats['messages_from_autopilot'] += 1
                    
                    # –ü–æ–¥—Å—á–µ—Ç —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
                    msg_type = msg.get_type()
                    if msg_type == 'HEARTBEAT':
                        self.stats['heartbeats'] += 1
                    elif 'PARAM' in msg_type:
                        self.stats['params'] += 1
                        self.logger.debug(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä: {msg_type}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
                    msg_buf = msg.get_msgbuf()
                    for client in self.clients[:]:  # –ö–æ–ø–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                        try:
                            client.send(msg_buf)
                            self.stats['messages_to_clients'] += 1
                        except Exception as e:
                            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É: {e}")
                            self.clients.remove(client)
                            self.stats['errors'] += 1
                
                time.sleep(0.001)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞: {e}")
                self.stats['errors'] += 1
                time.sleep(0.1)
    
    def print_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while self.running:
            time.sleep(30)  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
            self.logger.info("üìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê TCP MAVLINK BRIDGE ===")
            self.logger.info(f"üì° –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞: {self.stats['messages_from_autopilot']}")
            self.logger.info(f"üì± –°–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º: {self.stats['messages_to_clients']}")
            self.logger.info(f"üíì Heartbeat —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats['heartbeats']}")
            self.logger.info(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {self.stats['params']}")
            self.logger.info(f"üë• –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(self.clients)}")
            self.logger.info(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}")
            self.logger.info("=" * 45)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ TCP MAVLink Bridge...")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç—É
        if not self.connect_autopilot():
            return False
        
        # –ó–∞–ø—É—Å–∫ TCP —Å–µ—Ä–≤–µ—Ä–∞
        if not self.start_tcp_server():
            return False
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
        autopilot_thread = threading.Thread(target=self.autopilot_reader, daemon=True)
        stats_thread = threading.Thread(target=self.print_stats, daemon=True)
        
        autopilot_thread.start()
        stats_thread.start()
        
        self.logger.info("‚úÖ TCP MAVLink Bridge –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        self.logger.info("üîó –ù–∞—Å—Ç—Ä–æ–π—Ç–µ ngrok: ngrok tcp 14550")
        self.logger.info("üì± –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Mission Planner –∫ ngrok URL")
        
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while self.running:
                time.sleep(1)
                
        except KeyboardInterrupt:
            self.logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            self.running = False
            
        finally:
            self.cleanup()
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        self.running = False
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        for client in self.clients:
            try:
                client.close()
            except:
                pass
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º TCP —Å–æ–∫–µ—Ç
        try:
            self.tcp_socket.close()
        except:
            pass
        
        self.logger.info("‚úÖ TCP MAVLink Bridge –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    bridge = TCPMAVLinkBridge()
    bridge.run()

